use Nat/gt as gt
use Nat/sub as sub
use Nat/eq as eq
use List/reverse as rev

data Level {
  #Safe
  #Unsafe
}

levels: (List (List Nat))
| = [
      [#7 #6 #4 #2 #1]  // safe
      [#1 #2 #7 #8 #9]  // unsafe 
      [#9 #7 #6 #2 #1]  // unsafe
      [#1 #3 #2 #4 #5]  // unsafe
      [#8 #6 #4 #4 #1]  // unsafe
      [#1 #3 #6 #7 #9]  // safe
  ]


Diff: (List Nat) -> (List Nat)
| []    = []
| #Cons{h t} =
    match t {
      #Nil : []
      #Cons{h2 t2} : (#Cons {(sub h2 h) (Diff t)})
    }

DiffLevel: (List Nat) -> (List Nat)
| []    = []
| #Cons{h t} =
    let diff = (Diff #Cons{h t})
    match diff {
      #Nil: []
      #Cons{h2 t2}:
        match h2 {
          #Zero: (Diff (rev Nat #Cons{h t}))
          _: (Diff #Cons{h t})
        }
    }

IsLevelSafe: (List Nat) -> Level
| []    = #Safe
| #Cons{h t} =
    match h {
      #Zero: #Unsafe
      _:
        match (gt h #3) {
          #False:
            match (eq h #0){
              #True: #Unsafe
              #False: (IsLevelSafe t)
            }
          #True: #Unsafe
        }
    }


IsSafe: (List (List Nat)) -> (List Level)
| []    = []
| #Cons{h t} = (#Cons {(IsLevelSafe (DiffLevel h)) (IsSafe t)})

main: (List Level)
= (IsSafe
([
      [#7 #6 #4 #2 #1]
      [#1 #2 #7 #8 #9]
      [#9 #7 #6 #2 #1]
      [#1 #3 #2 #4 #5]
      [#8 #6 #4 #4 #1]
      [#1 #3 #6 #7 #9]
  ])
)


